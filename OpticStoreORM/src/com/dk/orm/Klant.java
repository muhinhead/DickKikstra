// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Mon Jun 20 18:51:53 CEST 2016
// generated file: do not modify
package com.dk.orm;

import com.dk.orm.dbobject.DbObject;
import com.dk.orm.dbobject.ForeignKeyViolationException;
import com.dk.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Klant extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer klantId = null;
    private String aanhef = null;
    private String voorletters = null;
    private String tussenvoegsel = null;
    private String achternaam = null;
    private String adres = null;
    private String huisnummer = null;
    private String postcode = null;
    private String plaats = null;
    private String land = null;
    private Date geboortedatum = null;
    private String telefoon = null;
    private String mobiel = null;
    private String email = null;

    public Klant(Connection connection) {
        super(connection, "klant", "klant_id");
        setColumnNames(new String[]{"klant_id", "aanhef", "voorletters", "tussenvoegsel", "achternaam", "adres", "huisnummer", "postcode", "plaats", "land", "geboortedatum", "telefoon", "mobiel", "email"});
    }

    public Klant(Connection connection, Integer klantId, String aanhef, String voorletters, String tussenvoegsel, String achternaam, String adres, String huisnummer, String postcode, String plaats, String land, Date geboortedatum, String telefoon, String mobiel, String email) {
        super(connection, "klant", "klant_id");
        setNew(klantId.intValue() <= 0);
//        if (klantId.intValue() != 0) {
            this.klantId = klantId;
//        }
        this.aanhef = aanhef;
        this.voorletters = voorletters;
        this.tussenvoegsel = tussenvoegsel;
        this.achternaam = achternaam;
        this.adres = adres;
        this.huisnummer = huisnummer;
        this.postcode = postcode;
        this.plaats = plaats;
        this.land = land;
        this.geboortedatum = geboortedatum;
        this.telefoon = telefoon;
        this.mobiel = mobiel;
        this.email = email;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Klant klant = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT klant_id,aanhef,voorletters,tussenvoegsel,achternaam,adres,huisnummer,postcode,plaats,land,geboortedatum,telefoon,mobiel,email FROM klant WHERE klant_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                klant = new Klant(getConnection());
                klant.setKlantId(new Integer(rs.getInt(1)));
                klant.setAanhef(rs.getString(2));
                klant.setVoorletters(rs.getString(3));
                klant.setTussenvoegsel(rs.getString(4));
                klant.setAchternaam(rs.getString(5));
                klant.setAdres(rs.getString(6));
                klant.setHuisnummer(rs.getString(7));
                klant.setPostcode(rs.getString(8));
                klant.setPlaats(rs.getString(9));
                klant.setLand(rs.getString(10));
                klant.setGeboortedatum(rs.getDate(11));
                klant.setTelefoon(rs.getString(12));
                klant.setMobiel(rs.getString(13));
                klant.setEmail(rs.getString(14));
                klant.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return klant;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO klant ("+(getKlantId().intValue()!=0?"klant_id,":"")+"aanhef,voorletters,tussenvoegsel,achternaam,adres,huisnummer,postcode,plaats,land,geboortedatum,telefoon,mobiel,email) values("+(getKlantId().intValue()!=0?"?,":"")+"?,?,?,?,?,?,?,?,?,?,?,?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getKlantId().intValue()!=0) {
                 ps.setObject(++n, getKlantId());
             }
             ps.setObject(++n, getAanhef());
             ps.setObject(++n, getVoorletters());
             ps.setObject(++n, getTussenvoegsel());
             ps.setObject(++n, getAchternaam());
             ps.setObject(++n, getAdres());
             ps.setObject(++n, getHuisnummer());
             ps.setObject(++n, getPostcode());
             ps.setObject(++n, getPlaats());
             ps.setObject(++n, getLand());
             ps.setObject(++n, getGeboortedatum());
             ps.setObject(++n, getTelefoon());
             ps.setObject(++n, getMobiel());
             ps.setObject(++n, getEmail());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getKlantId().intValue()==0) {
             stmt = "SELECT max(klant_id) FROM klant";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setKlantId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE klant " +
                    "SET aanhef = ?, voorletters = ?, tussenvoegsel = ?, achternaam = ?, adres = ?, huisnummer = ?, postcode = ?, plaats = ?, land = ?, geboortedatum = ?, telefoon = ?, mobiel = ?, email = ?" + 
                    " WHERE klant_id = " + getKlantId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getAanhef());
                ps.setObject(2, getVoorletters());
                ps.setObject(3, getTussenvoegsel());
                ps.setObject(4, getAchternaam());
                ps.setObject(5, getAdres());
                ps.setObject(6, getHuisnummer());
                ps.setObject(7, getPostcode());
                ps.setObject(8, getPlaats());
                ps.setObject(9, getLand());
                ps.setObject(10, getGeboortedatum());
                ps.setObject(11, getTelefoon());
                ps.setObject(12, getMobiel());
                ps.setObject(13, getEmail());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (Verkoop.exists(getConnection(),"klant_id = " + getKlantId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: verkoop_klant_fk");
        }
        if (Brilvoorschrift.exists(getConnection(),"klant_id = " + getKlantId())) {
            throw new ForeignKeyViolationException("Can't delete, foreign key violation: brilvoorschrift_klant_fk");
        }
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM klant " +
                "WHERE klant_id = " + getKlantId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setKlantId(new Integer(-getKlantId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getKlantId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT klant_id,aanhef,voorletters,tussenvoegsel,achternaam,adres,huisnummer,postcode,plaats,land,geboortedatum,telefoon,mobiel,email FROM klant " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Klant(con,new Integer(rs.getInt(1)),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getString(6),rs.getString(7),rs.getString(8),rs.getString(9),rs.getString(10),rs.getDate(11),rs.getString(12),rs.getString(13),rs.getString(14)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Klant[] objects = new Klant[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Klant klant = (Klant) lst.get(i);
            objects[i] = klant;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT klant_id FROM klant " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getKlantId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return klantId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setKlantId(id);
        setNew(prevIsNew);
    }

    public Integer getKlantId() {
        return klantId;
    }

    public void setKlantId(Integer klantId) throws ForeignKeyViolationException {
        setWasChanged(this.klantId != null && this.klantId != klantId);
        this.klantId = klantId;
        setNew(klantId.intValue() == 0);
    }

    public String getAanhef() {
        return aanhef;
    }

    public void setAanhef(String aanhef) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.aanhef != null && !this.aanhef.equals(aanhef));
        this.aanhef = aanhef;
    }

    public String getVoorletters() {
        return voorletters;
    }

    public void setVoorletters(String voorletters) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.voorletters != null && !this.voorletters.equals(voorletters));
        this.voorletters = voorletters;
    }

    public String getTussenvoegsel() {
        return tussenvoegsel;
    }

    public void setTussenvoegsel(String tussenvoegsel) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.tussenvoegsel != null && !this.tussenvoegsel.equals(tussenvoegsel));
        this.tussenvoegsel = tussenvoegsel;
    }

    public String getAchternaam() {
        return achternaam;
    }

    public void setAchternaam(String achternaam) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.achternaam != null && !this.achternaam.equals(achternaam));
        this.achternaam = achternaam;
    }

    public String getAdres() {
        return adres;
    }

    public void setAdres(String adres) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.adres != null && !this.adres.equals(adres));
        this.adres = adres;
    }

    public String getHuisnummer() {
        return huisnummer;
    }

    public void setHuisnummer(String huisnummer) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.huisnummer != null && !this.huisnummer.equals(huisnummer));
        this.huisnummer = huisnummer;
    }

    public String getPostcode() {
        return postcode;
    }

    public void setPostcode(String postcode) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.postcode != null && !this.postcode.equals(postcode));
        this.postcode = postcode;
    }

    public String getPlaats() {
        return plaats;
    }

    public void setPlaats(String plaats) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.plaats != null && !this.plaats.equals(plaats));
        this.plaats = plaats;
    }

    public String getLand() {
        return land;
    }

    public void setLand(String land) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.land != null && !this.land.equals(land));
        this.land = land;
    }

    public Date getGeboortedatum() {
        return geboortedatum;
    }

    public void setGeboortedatum(Date geboortedatum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.geboortedatum != null && !this.geboortedatum.equals(geboortedatum));
        this.geboortedatum = geboortedatum;
    }

    public String getTelefoon() {
        return telefoon;
    }

    public void setTelefoon(String telefoon) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.telefoon != null && !this.telefoon.equals(telefoon));
        this.telefoon = telefoon;
    }

    public String getMobiel() {
        return mobiel;
    }

    public void setMobiel(String mobiel) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.mobiel != null && !this.mobiel.equals(mobiel));
        this.mobiel = mobiel;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.email != null && !this.email.equals(email));
        this.email = email;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[14];
        columnValues[0] = getKlantId();
        columnValues[1] = getAanhef();
        columnValues[2] = getVoorletters();
        columnValues[3] = getTussenvoegsel();
        columnValues[4] = getAchternaam();
        columnValues[5] = getAdres();
        columnValues[6] = getHuisnummer();
        columnValues[7] = getPostcode();
        columnValues[8] = getPlaats();
        columnValues[9] = getLand();
        columnValues[10] = getGeboortedatum();
        columnValues[11] = getTelefoon();
        columnValues[12] = getMobiel();
        columnValues[13] = getEmail();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setKlantId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setKlantId(null);
        }
        setAanhef(flds[1]);
        setVoorletters(flds[2]);
        setTussenvoegsel(flds[3]);
        setAchternaam(flds[4]);
        setAdres(flds[5]);
        setHuisnummer(flds[6]);
        setPostcode(flds[7]);
        setPlaats(flds[8]);
        setLand(flds[9]);
        setGeboortedatum(toDate(flds[10]));
        setTelefoon(flds[11]);
        setMobiel(flds[12]);
        setEmail(flds[13]);
    }
}
