// Generated by com.xlend.orm.tools.dbgen.DbGenerator.class at Sat Jun 18 16:10:48 CEST 2016
// generated file: do not modify
package com.dk.orm;

import com.dk.orm.dbobject.DbObject;
import com.dk.orm.dbobject.ForeignKeyViolationException;
import com.dk.orm.dbobject.Triggers;
import java.sql.*;
import java.util.ArrayList;

public class Verkoop extends DbObject  {
    private static Triggers activeTriggers = null;
    private Integer verkoopId = null;
    private Integer klantId = null;
    private Date verkoopdatum = null;

    public Verkoop(Connection connection) {
        super(connection, "verkoop", "verkoop_id");
        setColumnNames(new String[]{"verkoop_id", "klant_id", "verkoopdatum"});
    }

    public Verkoop(Connection connection, Integer verkoopId, Integer klantId, Date verkoopdatum) {
        super(connection, "verkoop", "verkoop_id");
        setNew(verkoopId.intValue() <= 0);
//        if (verkoopId.intValue() != 0) {
            this.verkoopId = verkoopId;
//        }
        this.klantId = klantId;
        this.verkoopdatum = verkoopdatum;
    }

    public DbObject loadOnId(int id) throws SQLException, ForeignKeyViolationException {
        Verkoop verkoop = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT verkoop_id,klant_id,verkoopdatum FROM verkoop WHERE verkoop_id=" + id;
        try {
            ps = getConnection().prepareStatement(stmt);
            rs = ps.executeQuery();
            if (rs.next()) {
                verkoop = new Verkoop(getConnection());
                verkoop.setVerkoopId(new Integer(rs.getInt(1)));
                verkoop.setKlantId(new Integer(rs.getInt(2)));
                verkoop.setVerkoopdatum(rs.getDate(3));
                verkoop.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return verkoop;
    }

    protected void insert() throws SQLException, ForeignKeyViolationException {
         if (getTriggers() != null) {
             getTriggers().beforeInsert(this);
         }
         PreparedStatement ps = null;
         String stmt =
                "INSERT INTO verkoop ("+(getVerkoopId().intValue()!=0?"verkoop_id,":"")+"klant_id,verkoopdatum) values("+(getVerkoopId().intValue()!=0?"?,":"")+"?,?)";
         try {
             ps = getConnection().prepareStatement(stmt);
             int n = 0;
             if (getVerkoopId().intValue()!=0) {
                 ps.setObject(++n, getVerkoopId());
             }
             ps.setObject(++n, getKlantId());
             ps.setObject(++n, getVerkoopdatum());
             ps.execute();
         } finally {
             if (ps != null) ps.close();
         }
         ResultSet rs = null;
         if (getVerkoopId().intValue()==0) {
             stmt = "SELECT max(verkoop_id) FROM verkoop";
             try {
                 ps = getConnection().prepareStatement(stmt);
                 rs = ps.executeQuery();
                 if (rs.next()) {
                     setVerkoopId(new Integer(rs.getInt(1)));
                 }
             } finally {
                 try {
                     if (rs != null) rs.close();
                 } finally {
                     if (ps != null) ps.close();
                 }
             }
         }
         setNew(false);
         setWasChanged(false);
         if (getTriggers() != null) {
             getTriggers().afterInsert(this);
         }
    }

    public void save() throws SQLException, ForeignKeyViolationException {
        if (isNew()) {
            insert();
        } else {
            if (getTriggers() != null) {
                getTriggers().beforeUpdate(this);
            }
            PreparedStatement ps = null;
            String stmt =
                    "UPDATE verkoop " +
                    "SET klant_id = ?, verkoopdatum = ?" + 
                    " WHERE verkoop_id = " + getVerkoopId();
            try {
                ps = getConnection().prepareStatement(stmt);
                ps.setObject(1, getKlantId());
                ps.setObject(2, getVerkoopdatum());
                ps.execute();
            } finally {
                if (ps != null) ps.close();
            }
            setWasChanged(false);
            if (getTriggers() != null) {
                getTriggers().afterUpdate(this);
            }
        }
    }

    public void delete() throws SQLException, ForeignKeyViolationException {
        if (getTriggers() != null) {
            getTriggers().beforeDelete(this);
        }
        PreparedStatement ps = null;
        String stmt =
                "DELETE FROM verkoop " +
                "WHERE verkoop_id = " + getVerkoopId();
        try {
            ps = getConnection().prepareStatement(stmt);
            ps.execute();
        } finally {
            if (ps != null) ps.close();
        }
        setVerkoopId(new Integer(-getVerkoopId().intValue()));
        if (getTriggers() != null) {
            getTriggers().afterDelete(this);
        }
    }

    public boolean isDeleted() {
        return (getVerkoopId().intValue() < 0);
    }

    public static DbObject[] load(Connection con,String whereCondition,String orderCondition) throws SQLException {
        ArrayList lst = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT verkoop_id,klant_id,verkoopdatum FROM verkoop " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                " WHERE " + whereCondition : "") +
                ((orderCondition != null && orderCondition.length() > 0) ?
                " ORDER BY " + orderCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            while (rs.next()) {
                DbObject dbObj;
                lst.add(dbObj=new Verkoop(con,new Integer(rs.getInt(1)),new Integer(rs.getInt(2)),rs.getDate(3)));
                dbObj.setNew(false);
            }
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        Verkoop[] objects = new Verkoop[lst.size()];
        for (int i = 0; i < lst.size(); i++) {
            Verkoop verkoop = (Verkoop) lst.get(i);
            objects[i] = verkoop;
        }
        return objects;
    }

    public static boolean exists(Connection con, String whereCondition) throws SQLException {
        if (con == null) {
            return true;
        }
        boolean ok = false;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String stmt = "SELECT verkoop_id FROM verkoop " +
                ((whereCondition != null && whereCondition.length() > 0) ?
                "WHERE " + whereCondition : "");
        try {
            ps = con.prepareStatement(stmt);
            rs = ps.executeQuery();
            ok = rs.next();
        } finally {
            try {
                if (rs != null) rs.close();
            } finally {
                if (ps != null) ps.close();
            }
        }
        return ok;
    }

    //public String toString() {
    //    return getVerkoopId() + getDelimiter();
    //}

    public Integer getPK_ID() {
        return verkoopId;
    }

    public void setPK_ID(Integer id) throws ForeignKeyViolationException {
        boolean prevIsNew = isNew();
        setVerkoopId(id);
        setNew(prevIsNew);
    }

    public Integer getVerkoopId() {
        return verkoopId;
    }

    public void setVerkoopId(Integer verkoopId) throws ForeignKeyViolationException {
        setWasChanged(this.verkoopId != null && this.verkoopId != verkoopId);
        this.verkoopId = verkoopId;
        setNew(verkoopId.intValue() == 0);
    }

    public Integer getKlantId() {
        return klantId;
    }

    public void setKlantId(Integer klantId) throws SQLException, ForeignKeyViolationException {
        if (klantId!=null && !Klant.exists(getConnection(),"klant_id = " + klantId)) {
            throw new ForeignKeyViolationException("Can't set klant_id, foreign key violation: verkoop_klant_fk");
        }
        setWasChanged(this.klantId != null && !this.klantId.equals(klantId));
        this.klantId = klantId;
    }

    public Date getVerkoopdatum() {
        return verkoopdatum;
    }

    public void setVerkoopdatum(Date verkoopdatum) throws SQLException, ForeignKeyViolationException {
        setWasChanged(this.verkoopdatum != null && !this.verkoopdatum.equals(verkoopdatum));
        this.verkoopdatum = verkoopdatum;
    }
    public Object[] getAsRow() {
        Object[] columnValues = new Object[3];
        columnValues[0] = getVerkoopId();
        columnValues[1] = getKlantId();
        columnValues[2] = getVerkoopdatum();
        return columnValues;
    }

    public static void setTriggers(Triggers triggers) {
        activeTriggers = triggers;
    }

    public static Triggers getTriggers() {
        return activeTriggers;
    }

    //for SOAP exhange
    @Override
    public void fillFromString(String row) throws ForeignKeyViolationException, SQLException {
        String[] flds = splitStr(row, delimiter);
        try {
            setVerkoopId(Integer.parseInt(flds[0]));
        } catch(NumberFormatException ne) {
            setVerkoopId(null);
        }
        try {
            setKlantId(Integer.parseInt(flds[1]));
        } catch(NumberFormatException ne) {
            setKlantId(null);
        }
        setVerkoopdatum(toDate(flds[2]));
    }
}
